NEXTJS APP INIT

https://nextjs.org/docs/getting-started

terminal in blobkchain folder
npx create-next-app marketplace-eth
this will create the project along with dependencies
react, react-dom and next
nextjs is using reactjs internally also it's providing out of the box server side rendering

we use npm run dev. localhost:3000

remove api folder under pages
remove  homemodule.css in styles folder

lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/f5fbea8c16d9ca9883e42cb232796a37f4ed8a19

-------------------------------------------------------------------------------------------------
TAILWIND INTERGRATION

https://tailwindcss.com/docs/guides/nextjs

npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/317c228982a93d7cf3330b7d62d7142f672f4aad
-------------------------------------------------------------------------------------------------
COMPILER OPTIONS
base folder create components folder
components>sub1>sub2 folders
create Test.js under sub2
create Root.js under components

lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/805b5a3adcc41cb36632d2961336dbc0d41484f7

-------------------------------------------------------------------------------------------------
INIT COMPONENTS

lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/2e84d611f9e5644660274a0c20b2d26722378ac8#diff-7c97c1ad17c63f34774324965f81661cea32f533a65c39ab03576069972e4d0e

https://github.com/Jerga99/eth-marketplace-course/commit/2e84d611f9e5644660274a0c20b2d26722378ac8

this is for layout
create course.js under pages folder 
and copy paste  pages/course.js code in it.

https://raw.githubusercontent.com/Jerga99/eth-marketplace-course/2e84d611f9e5644660274a0c20b2d26722378ac8/pages/index.js
copy paste this on pages>index.js

copy paste below styles>global.css
this provides min height to our page

.fit {
  min-height: calc(100vh - 88px);
}

copy paste below tailwind.config.js extend

extend: {
      maxWidth: {
        "8xl": "1920px"
      },
    },
-------------------------------------------------------------------------------------------------
FOOTER AND NAVBAR
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/e2d59cabee531ee053aeacba991a979f4ceefc6b

to separate components into their own files
creating components folder and importing them from there
under component create common folder
under common folder create below
1- we should create folder and index.js files for each component 
    a - component>common>footer><index.js
    b - component>common>navbar><index.js
    c - component>common>index.js (this will be used for exporting)
2- and we can create an index.js file (see c)

export { default as Footer } from "./footer"
export { default as Navbar } from "./navbar"

3- and then we can copy/paste related components into their respective files in components, delete them from the main file and return them:

export default function Footer() {

  return (
      // copy component here //
  )
}
4- then we need to import index.js (see step 2) to our pages>index.js file
import { Navbar, Footer } from "@components/common"

then we can call Footer and Navbar on their sections:
<Navbar />
<Footer />
-------------------------------------------------------------------------------------------------
MORE COMPONENTS
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/fabde7b8260e6494ad304ff965c3d6237fd1d6c1
-------------------------------------------------------------------------------------------------
REMAINING INDEX COMPONENTS
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/0c4dace3d69ca5214abdfd12708fd15b886471de
-------------------------------------------------------------------------------------------------
COURSE COMPONENTS
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/202707381501f4fccc44ffb99c5bba3cd2b12f8c
-------------------------------------------------------------------------------------------------
BASE LAYOUT
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/10f64c76bf6df91476416be1f3b7e594ee3973f7

we want to create a layout which will be a wrapper on all pages ie. navbar and footer and width

1 - create a folders and index files
  components/layout/base/index.js
  a - import navbar and footer here
  b - make children under the div. define children on the function
  c - wrap entire code under a classname because it will be shared amoung all pages

2 - components/layout/index.js
  this is to export BaseLayout

3 - pages/course.js
  wrap entire page under BaseLayout
  wrap CourseHero under div to define y axis padding
  also make sure to import BaseLayout from @compoponents/layout

4 - pages/index.js
  wrap entire page under BaseLayout
  delete Navbar and Footer from the import line and import those in base index.js (see step 1a)
-------------------------------------------------------------------------------------------------
BASE LAYOUT DIFFERENT METHOD
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/b21e73d8c218326ff70e0d515181195b05d8803d

everything is rendered through _app.js. you can use component to apply everything.

1- you remove BaseLayout wrapping from index and course.js files and add
Home.Layout = BaseLayout
Course.Layout = BaseLayout

2- _app.js file we need to extract layout from component. to do that we need to wrap it in return

const Layout = Component.Layout // this will extract layout from component

// wrap the component inside. by this you can get home and course layouts through your components.
// because component here is basically you web pages
  return ( 
    <Layout>
      <Component {...pageProps} />
    </Layout> 
  )  

// if by any chance we forget to define layout on one of our pages and prevent error, we can make our _app.js like this:
BUT without header and footer.

import '@styles/globals.css'

const Noop = ({children}) => <>{children}</> // this will take children and then re-render them.

function MyApp({ Component, pageProps }) {

  const Layout = Component.Layout ?? Noop // if you don't have a layout. assign your Noop to the layout

  return (
    <Layout>
      <Component {...pageProps} />
    </Layout> 
  )  
}

export default MyApp
-------------------------------------------------------------------------------------------------
COURSE DATA
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/bea63caff508bebe615bf52b48342d8c4b2ab9de

we create course contents and retrieve them via fetcher.js
course contents will be stored in index.json file. this is an array of items.
we need to create mapping for the array 
it will use course id's as key to call course contents.

// imports course data
import courses from "./index.json"
// function to get all courses
export const getAllCourse = () => {
  // object is data in array format.
  // mapping for courses as an object
  return {
    data: courses,
    courseMap: courses.reduce((a, c, i) => {
      a[c.id] = c // a for accumulator. c.id retrieves the course id from json and assigns to the c. 
      a[c.id].index = i // creates index
      return a
    }, {}) // {} starts with empty object. starts with zero. and then iterates with a.
  }
}

-------------------------------------------------------------------------------------------------
GET COURSE DATA
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/983d11bf1d335d48fc61cc5dccd5709c7bcd6c2d

we need to get course data into our home page to display

1 - we need to create a shortcut to our content folder in jsconfig.json file.
2 - we need to add a function (getStaticProps) to fetch course content (static) for our home page.
3 - we displayed data as strings (stringify) for now
-------------------------------------------------------------------------------------------------
COURSE LIST
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/3e64e6636dd47f4678bd74e7e90b33b0ff48483a
-------------------------------------------------------------------------------------------------
IMAGE IMPROVEMENT
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/2d1e594552c4ce180225662848e2a47f874f8fd2
-------------------------------------------------------------------------------------------------
COURSE DETAIL PAGE
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/3360b1211fb87a395cd988f558404da02e38a625

1 - Create a js. pages/courses/[slug].js - all course page will be rendered through this file.
2 - copy pages/courses.js code and paste them into [slug].js file. delete pages/courses.js
3 - go to components/course/list/index.js
4 - import Link from "next/link" because we will create links for our courses.
5 - Change these as below to navigate to course page only without loading entire browser
<Link href={`/courses/${course.slug}`}> // we will get all course links through this.
<a 
 className="block mt-1 text-lg leading-tight font-medium text-black hover:underline">
{course.title}
</a>
6 - go to components/common//navbar/index.js
7 - import Link from "next/link" because we will create links for headers
8 - arrange links and theit namesas shown on the file.
-------------------------------------------------------------------------------------------------
GET SINGLE COURSE
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/6e1b4f94a425737db580ecb3b921204510bc6176

1 - we need to add 2 functions to pages/courses/[slug].js to get customixed data for each course.
2 - getStaticPaths and getStaticProps. see file for details.
3 - getStaticPaths will convert data array into params for all courses so that we can retrieve them.
4 - getStaticProps to fetch data for each course. see pages/courses/[slug] for details.
-------------------------------------------------------------------------------------------------
COURSE HERO
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/922fa7ac857e0b360ce5a445232d0750779bc77a

1 - get data into slug file for title, description and image
2 - get title, description and image into components/course/hero/index.js into function
3 - change image path and title.
4 - change description into {description}
5 - you can fetch title data into 2 pieces with different colors by span and substring. see file for details.
-------------------------------------------------------------------------------------------------
LECTURES AND KEYPOINTS
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/8a474e637ff6b963c50cbf4a57e8987ff6401f04
-------------------------------------------------------------------------------------------------
CONNECT BUTTON AND IMAGE
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/cc19b3b4190a811fe6a3eb3bac9dd38cd325143b
-------------------------------------------------------------------------------------------------
WEB3 PROVIDER
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/9c68b0c27b03c8d18979a5a05dc7509876730794
-------------------------------------------------------------------------------------------------
LOAD PROVIDER
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/8862973c627178532f733f8eb3707c5ac3538a8a

-------------------------------------------------------------------------------------------------
USE ACCOUNT
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/d1d83e48841cacb5b9aa23103cd916dd7e1ef93a

1 - we need to create a function that will call account and its state and variables.
2 - create components/providers/web3/hooks/useAccount.js
    
        export const useAccount = web3 => () => { // this function will get web3 and return below
        return{
            account: web3 ? "Test Account" : "null" // if there is web3 then get me string "Test Account", if not, get me "null"
        }
      }

3 - components/providers/web3/hooks/setupHooks.js

        import { useAccount } from "./useAccount" // imports use account function

        const DEFAULT_HOOKS = { // default state
            useAccount: () => ({account: null})
        }

        export const setupHooks = web3 => { // if there is no web3 return default hooks.
            if (!web3) { return DEFAULT_HOOKS }
          
            return{
                useAccount: useAccount(web3) // otherwise return useAccount via web3
            }
}

4 - now main web3 file components/providers/web3/index.js

        return {
      ...web3Api,
      isWeb3Loaded: web3Api.web3 != null,
      hooks: setupHooks(web3Api.web3), // add this line to get setupHooks under useMemo function. make sure it's importing setupHooks.
      connect: web3Api.provider ?
        async () => {
          try {

5 - components/ui/common/navbar/index.js

        const { connect, isLoading, isWeb3Loaded, hooks } = useWeb3()
        const { account } = hooks.useAccount()

now we can add hooks via useWeb3 and hooks.useAccount() to retrieve account state
-------------------------------------------------------------------------------------------------
PROVIDER TINY IMPROVEMENT

lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/5496199b4314823a180ec280cc41ee2f0db158cd

components/providers/web3/index.js

add this line to  useMemo to define web3Api to use web and provider
so that we don't need to type web3Api everytime.

const { web3, provider } = web3Api

now you can delete web3Api under return, NOT THE  DEPENDENCY
-------------------------------------------------------------------------------------------------
USE HOOKS ABSTRACTION
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/e3696384c807119f8293fc6d7a7eb326b8c71b62

1 - components/providers/web3/index.js

  return {
            ...web3Api,
            isWeb3Loaded: web3 != null,
            getHooks: () => setupHooks(web3), // this will simply call setupHooks function
            connect: provider ?

export function useHooks(cb) { // useHooks will call cb function which will retrieve getHooks
  const { getHooks } = useWeb3() // getHooks should be defined for using web3
  return cb(getHooks()) // getHooks will be returned as cb
}

2 - components/providers/web3/hooks/useAccount.js

export const handler = web3 => () => { // change useAccount to handler - different names
  return {
    account: web3 ? "Test Account" : "null"
  }

3 - components/web3/hooks/useAccount.js // new folder and file

import { useHooks } from "@components/providers/web3"

export const useAccount = () => { // useAccount function will return hooks
  return useHooks(hooks => hooks.useAccount)() // hooks.useAccount to specify which hook
}

4 - components/providers/web3/hooks/setupHooks.js

import { handler as createUseAccount } from "./useAccount"

export const setupHooks = web3 => { // this will be called in components/providers/web3/index.js
   
    return {
        useAccount: createUseAccount(web3) // and will be passing useAccount function to be called in Navbar (see below)
    }
}

5 - components/ui/common/navbar/index.js

import { useAccount } from "@components/web3/hooks/useAccount" // make sure this is imported

export default function Navbar() {
  const { connect, isLoading, isWeb3Loaded } = useWeb3() 

  const { account } = useAccount()
  
  // you can delete hooks because we don't need it anymore
  because we can call useAccount function from 
  components/web3/hooks/useAccount.js via
  components/providers/web3/index.js will get
  components/providers/web3/hooks/useAccount.js via
  components/providers/web3/hooks/setupHooks.js
-------------------------------------------------------------------------------------------------
USE SWR
lecture code:
https://github.com/Jerga99/eth-marketplace-course/commit/1f37254f3e4e4c74734ba4e07a7a8da7a87537d3

























